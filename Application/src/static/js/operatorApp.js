let allSensors = [];

async function fetchSensorData() {
    try {
        const response = await fetch('/view');
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");

        allSensors = await response.json();
        applyFilter();     // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}


function applyFilter() {
    const selectedGroup = document.getElementById('group-filter').value;
    const tbody = document.querySelector('#sensors-table tbody');
    tbody.innerHTML = '';

    const filtered = selectedGroup
    ? allSensors.filter(s => s.group === selectedGroup)
    : allSensors;

    filtered.forEach(sensor => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${sensor.id}</td>
            <td>${sensor.group}</td>
            <td>${sensor.value.toFixed(2)}</td>
            <td>${sensor.unit}</td>
            <td>
                <span class="status-icon ${getStatusClass(sensor.status)}">
                    ${getStatusIcon(sensor.status)}
                </span>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function getStatusClass(status) {
    switch (status) {
        case 'active':
            return 'green';
        case 'inactive':
            return 'yellow'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
        case 'out_of_range':
            return 'red';
        default:
            return 'gray'; // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    }
}

function getStatusIcon(status) {
    switch (status) {
        case 'active':
            return 'üü¢';
        case 'inactive':
            return '‚ö†';
        case 'out_of_range':
            return '‚ùó';
        default:
            return '‚ö´'; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    }
}

// –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥
fetchSensorData();
setInterval(fetchSensorData, 1000);