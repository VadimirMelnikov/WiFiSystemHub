from datetime import datetime
import matplotlib.pyplot as plt
import io
import base64

from flask import Flask, request, render_template
# from flasgger import Swagger
import json

from Repository import Repository
from Signal import Signal

app = Flask('WiFiSystemHub')
# app.config['SWAGGER'] = {
#     'title': 'WiFiSystemHub',
#     'version': '1.0',
#     'description': "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –≤–∞–π-—Ñ–∞–π –ø–æ–∫—Ä—ã—Ç–∏–µ–º",
#     'uiversion': 3
# }
# Swagger(app, template_file="swagger.yaml")

rep = Repository(
                'mongodb://localhost:27017/',
                'esp_database',
                'esp_collection'
                )

# –î–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç—á–∏–∫–∞—Ö –∑–∞–≥–ª—É—à–∫–∞
sensors_data = [
    {"id": 1, "group": "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "value": 100, "unit": "%", "status": "normal"},
    {"id": 2, "group": "–£—Ä–æ–≤–µ–Ω—å", "value": 180, "unit": "–º–º", "status": "error"},
    {"id": 3, "group": "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "value": 180, "unit": "%", "status": "warning"},
    {"id": 4, "group": "–î–∞–≤–ª–µ–Ω–∏–µ", "value": 44, "unit": "–∫–ü–∞", "status": "normal"},
]

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
def get_status_icon(status):
    if status == "normal":
        return "üü¢"
    elif status == "warning":
        return "üü°"
    elif status == "error":
        return "üî¥"
    else:
        return "‚ö™"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def generate_chart():
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
    pressure_1 = [500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600]
    pressure_2 = [400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(8, 6))
    plt.plot(months, pressure_1, label='Pressure_1', color='blue')
    plt.plot(months, pressure_2, label='Pressure_2', color='green')
    plt.fill_between(months, pressure_1, pressure_2, color='lightgray', alpha=0.5)
    plt.xlabel('Month')
    plt.ylabel('–î–∞–≤–ª–µ–Ω–∏–µ, –∫–ü–∞')
    plt.title('–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è')
    plt.legend()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
    chart_url = base64.b64encode(img.getvalue()).decode()
    return f"data:image/png;base64,{chart_url}"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
notifications = [
    "14:23:33 23.02.2025 –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞—â–∏—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–∞–≤–ª–µ–Ω–∏—è",
    "14:23:33 23.02.2025 –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –¥–∞—Ç—á–∏–∫–µ 4",
    "14:23:33 23.02.2025 –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞—â–∏—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–∞–≤–ª–µ–Ω–∏—è",
    "14:23:33 23.02.2025 –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –¥–∞—Ç—á–∏–∫–µ 4",
    "14:23:33 23.02.2025 –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞—â–∏—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–∞–≤–ª–µ–Ω–∏—è",
    "14:23:33 23.02.2025 –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –¥–∞—Ç—á–∏–∫–µ 4",
    "14:23:33 23.02.2025 –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞—â–∏—Ç–∞ –ø–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–∞–≤–ª–µ–Ω–∏—è"
]

sensors = [
    "–î–∞—Ç—á–∏–∫ 1: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 25¬∞C",
    "–î–∞—Ç—á–∏–∫ 2: –î–∞–≤–ª–µ–Ω–∏–µ 1.2 atm",
    "–î–∞—Ç—á–∏–∫ 3: –í–ª–∞–∂–Ω–æ—Å—Ç—å 60%",
    "–î–∞—Ç—á–∏–∫ 4: –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã 0.8 m"
]

mechanisms = [
    "–ú–µ—Ö–∞–Ω–∏–∑–º 1: –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
    "–ú–µ—Ö–∞–Ω–∏–∑–º 2: –ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω",
    "–ú–µ—Ö–∞–Ω–∏–∑–º 3: –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
    "–ú–µ—Ö–∞–Ω–∏–∑–º 4: –†–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–æ–π"
]




@app.route("/")
def main_page():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    for sensor in sensors_data:
        sensor["status_icon"] = get_status_icon(sensor["status"])

    return render_template('index2.html',
                           sensors_data=sensors_data,
                           current_time=current_time)


@app.route('/operator')
def operator_page():
    chart_url = generate_chart()
    return render_template('index.html',
                           chart_url=chart_url,
                           notifications=notifications,
                           sensors=sensors,
                           mechanisms=mechanisms)


@app.route("/data", methods=['GET'])
def send_signal():
    data = json.loads(request.args.get('data'))
    signal = Signal(
                    name=data['name'],
                    mode=data['mode'],
                    param=data['param'])
    response = "{}"
    if signal.mode == "Sensor":
        rep.save_signal_to_db(signal)

    else:
        response = rep.get_data_by_client_name(signal)
    return json.dumps(response)

if __name__ == "__main__":
    app.run(debug=True, port=5000)